version: '3.8'
services:
  weatherapp:
    image: weatherapp
    build:
      context: .
      dockerfile: WeatherBotApi.WeatherApp/Presentation/WeatherApp.WebApi/Properties/Dockerfile
    ports:
      - "5555:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
  telegrambot:
    image: telegrambot
    build:
      context: .
      dockerfile: WeatherBotApi.TelegramBotApp/Presentation/TelegramBotApp.Api/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
  databaseapi:
    image: databaseapi
    build:
      context: .
      dockerfile: WeatherBotApi.DatabaseApp/Presentation/DatabaseApp.WebApi/Properties/Dockerfile
    ports:
      - "5556:8080"
    depends_on:
      database:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DbConnection=Host=database:5432;Database=weather-database;Username=user;Password=pass
  rabbitmq:
    image: rabbitmq:3.13.0-management
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    ports:
      - "5672:5672"
      - "15672:15672"
  database:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: weather-database
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    volumes:
      - ~/data/postgres:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 1s
      timeout: 5s
      retries: 3
    ports:
      - "5755:5432"
  redis:
    image: 'redis:latest'
    ports:
      - "6379:6379"